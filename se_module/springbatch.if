############################################################################
#
#	Springbatch SELinux policymodule
#
#	https://github.com/lhqg/selinux_springbatch
#
#
# Copyright (c) 2022 LHQG, H. Quarantel-Colombani <hubert@quarantel.name>
# Author: Hubert Quarantel-Colombani <hubert@quarantel.name>
#
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of version 3 of the GNU General Public License as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#
############################################################################

########################################
## <summary>
##      Authorize Springboot batch job to connect to remote port
## </summary>
## <param name="service">
##      <summary>
##      The service name prefix to allow connection to (TCP).
##	e.g.: ldap
##      </summary>
## </param>
#
interface(`springbatch_allow_connectto',`
	gen_require(`
		type	springbatch_t;
		type	$1_port_t;
	')
	
	allow	springbatch_t	$1_port_t:tcp_socket	name_connect;
')

########################################
## <summary>
##      Add service to services Springboot batch job
##	is allowed to connnect to
## </summary>
## <param name="service">
##      <summary>
##      The service name prefix to be consumed.
##	e.g.: ldap
##      </summary>
## </param>
#
interface(`springbatch_allow_consumed_service',`
	gen_require(`
		type		$1_port_t;
		attribute	springbatch_consumed_svc_type;
	')
	
	typeattribute	$1_port_t	springbatch_consumed_svc_type;
')

########################################
## <summary>
##      Grant permissions to deploy Springboot batch job
##  files (create/read/delete/write) and to manage the Springboot services.
## </summary>
## <param name="dom_prefix">
##      <summary>
##      The domain name prefix to grant the deployment permissions to.
##	e.g.: ansible
##      </summary>
## </param>
#
interface(`springbatch_deployer',`
	gen_require(`
		type		$1_t;

		attribute	springbatch_file_type;
		attribute	springbatch_deploy_file_type;

		type		springbatch_var_t;
		type		springbatch_bin_t;
		type		springbatch_lib_t;
		type		springbatch_run_t;
		type		springbatch_dynlib_t;
		type		springbatch_conf_t;
		type		springbatch_tmp_t;
		type		springbatch_log_t;
		type		springbatch_exec_t;

		type		springbatch_unit_file_t;

		type		var_t;
		type		var_lib_t;
		type		var_run_t;
		type		var_log_t;
		type		usr_t;
		type		tmp_t;
		
		class		service	all_service_perms;
	')

	ifdef(`distro_debian', `
		define(`manage_service_perms', `{ start stop status reload enable disable } ')
	')


	# Top-level dirs type transitions
	type_transition $1_t var_t:dir		springbatch_var_t "springboot" ;
	type_transition $1_t var_lib_t:dir	springbatch_var_t "springboot" ;
	type_transition $1_t var_run_t:dir	springbatch_run_t "springboot" ;
	type_transition $1_t var_log_t:dir	springbatch_log_t "springboot" ;
	type_transition $1_t tmp_t:dir		springbatch_tmp_t "springboot" ;
	type_transition $1_t usr_t:dir		springbatch_bin_t "springboot" ;

	# Allow deployer to read Springboot files

	allow	$1_t	springbatch_file_type:dir					list_dir_perms;
	allow	$1_t	springbatch_file_type:notdevfile_class_set	getattr;
	allow	$1_t	springbatch_file_type:file					read_file_perms;
	allow	$1_t	springbatch_file_type:lnk_file				read_lnk_file_perms;

	# Allow deployer to create directories at top-level directories
	allow	$1_t	springbatch_var_t:dir	{ create_dir_perms delete_dir_perms rw_dir_perms };
	allow	$1_t	springbatch_bin_t:dir	{ create_dir_perms delete_dir_perms rw_dir_perms };
	allow	$1_t	springbatch_log_t:dir	{ create_dir_perms list_dir_perms };

	# Allow deployer to create/delete generic Springboot files
	allow	$1_t	springbatch_deploy_file_type:dir			rw_dir_perms;
	allow	$1_t	springbatch_deploy_file_type:file		manage_file_perms;
	allow	$1_t	springbatch_deploy_file_type:lnk_file	manage_lnk_file_perms;

	# Allow full management on Springboot auto-deployed library files 
	allow	$1_t	springbatch_dynlib_t:dir			manage_dir_perms;
	allow	$1_t	springbatch_dynlib_t:file		delete_file_perms;
	allow	$1_t	springbatch_dynlib_t:lnk_file	delete_lnk_file_perms;

	# Allow deployer to deploy specific subdirs in the Springboot instance static directory
	filetrans_add_pattern($1_t,	springbatch_bin_t,	springbatch_conf_t,	dir, "conf" )
	filetrans_add_pattern($1_t,	springbatch_bin_t,	springbatch_conf_t,	dir, "env" )
	filetrans_add_pattern($1_t,	springbatch_bin_t,	springbatch_conf_t,	dir, "properties" )

	filetrans_add_pattern($1_t,	springbatch_bin_t,	springbatch_lib_t,	dir, "lib" )
	filetrans_add_pattern($1_t,	springbatch_bin_t,	springbatch_lib_t,	dir, "app" )
	filetrans_add_pattern($1_t,	springbatch_bin_t,	springbatch_run_t,	dir, "run" )

	filetrans_add_pattern($1_t,	springbatch_conf_t,	springbatch_conf_t,	{ dir file lnk_file } )
	filetrans_add_pattern($1_t,	springbatch_lib_t,	springbatch_lib_t,	{ dir file lnk_file} )
	filetrans_add_pattern($1_t,	springbatch_bin_t,	springbatch_bin_t,	{ dir file lnk_file } )

	filetrans_add_pattern($1_t,	springbatch_bin_t,	springbatch_exec_t,	dir,	"service" )
	filetrans_add_pattern($1_t,	springbatch_bin_t,	springbatch_exec_t,	file,	"springbatch_service" )
	filetrans_add_pattern($1_t,	springbatch_exec_t,	springbatch_exec_t,	{ file lnk_file } )

	# Allow deployer to deploy specific directories in the Springboot instance runtime tree
	filetrans_add_pattern($1_t,	springbatch_var_t,	springbatch_tmp_t,		dir,	"temp" )
	filetrans_add_pattern($1_t,	springbatch_var_t,	springbatch_tmp_t,		dir,	"tmp" )
	filetrans_add_pattern($1_t,	springbatch_var_t,	springbatch_run_t,		dir,	"cache" )
	filetrans_add_pattern($1_t,	springbatch_var_t,	springbatch_run_t,		dir,	"work" )
	filetrans_add_pattern($1_t,	springbatch_var_t,	springbatch_run_t,		dir,	"run" )
	filetrans_add_pattern($1_t,	springbatch_var_t,	springbatch_dynlib_t,	dir,	"dynlib" )
	filetrans_add_pattern($1_t,	springbatch_var_t,	springbatch_dynlib_t,	dir,	"dynapp" )

	# Allow deployer to manage Springboot services (stop/start/enable/disable...)
	allow	$1_t	springbatch_unit_file_t:dir		list_dir_perms;
	allow	$1_t	springbatch_unit_file_t:file		read_file_perms;
	allow	$1_t	springbatch_unit_file_t:lnk_file manage_lnk_file_perms;

	allow	$1_t	springbatch_unit_file_t:service	manage_service_perms;

')



########################################
## <summary>
##      Grant permissions to deploy Springboot batch job
##  systemd unit files (create/read/delete/write).
## </summary>
## <param name="dom_prefix">
##      <summary>
##      The domain name prefix to grant the deployment permissions to.
##	e.g.: ansible
##      </summary>
## </param>
#
interface(`springbatch_systemd_deployer',`
	gen_require(`
		type		$1_t;
		type		springbatch_unit_file_t;
		type		systemd_unit_file_t;
	')

	# Allow deployer to deploy Springboot systemd unit files
	allow	$1_t	springbatch_unit_file_t:dir		{ create_dir_perms delete_dir_perms rw_dir_perms };
	allow	$1_t	springbatch_unit_file_t:file		manage_file_perms;
	allow	$1_t	springbatch_unit_file_t:lnk_file	manage_lnk_file_perms;

	filetrans_add_pattern($1_t,	systemd_unit_file_t,	springbatch_unit_file_t,	{ file lnk_file },	"springbatch.service" )
	filetrans_add_pattern($1_t,	systemd_unit_file_t,	springbatch_unit_file_t,	dir,				"springbatch.service.d" )
	filetrans_add_pattern($1_t,	systemd_unit_file_t,	springbatch_unit_file_t,	file,				"springbatch@.service" )
	filetrans_add_pattern($1_t,	systemd_unit_file_t,	springbatch_unit_file_t,	dir,				"springbatch@.service.d" )

	filetrans_add_pattern($1_t,	springbatch_unit_file_t,	springbatch_unit_file_t,	{ dir file lnk_file } )
')

########################################
## <summary>
##      Grant permissions to deploy Springboot batch job
##  systemd unit files (create/read/delete/write) for a specific unit instance.
## </summary>
## <param name="dom_prefix">
##      <summary>
##      The domain name prefix to grant the deployment permissions to.
##	e.g.: ansible
##      </summary>
## </param>
## <param name="unit_intance">
##      <summary>
##      The name of the systemd service unit instance.
##	e.g.: my_app
##      </summary>
## </param>
#
interface(`springbatch_systemd_unit_instance_deployer',`
	gen_require(`
		type		$1_t;
		type		springbatch_unit_file_t;
		type		systemd_unit_file_t;
	')

	springbatch_systemd_deployer($1)

	filetrans_add_pattern($1_t,	systemd_unit_file_t,	springbatch_unit_file_t,	{ file lnk_file },	"springbatch@$2.service" )
	filetrans_add_pattern($1_t,	systemd_unit_file_t,	springbatch_unit_file_t,	dir,				"springbatch@$2.service.d" )

')


########################################
## <summary>
##      Grant permissions to deploy Springboot batch job
##  authentication files (create/read/delete/write).
## </summary>
## <param name="dom_prefix">
##      <summary>
##      The domain name prefix to grant the deployment permissions to.
##	e.g.: ansible
##      </summary>
## </param>
#
interface(`springbatch_auth_deployer',`
	gen_require(`
		type		$1_t;

		type		springbatch_bin_t;
		type		springbatch_auth_t;
	')

	# Allow deployer to create/remove auth files directories
	allow	$1_t	springbatch_auth_t:dir	{ create_dir_perms delete_dir_perms rw_dir_perms };

	# Allow deployer to create/delete Springboot auth files
	allow	$1_t	springbatch_auth_t:file		{ create_file_perms delete_file_perms append_file_perms write_file_perms };
	allow	$1_t	springbatch_auth_t:lnk_file	{ create_lnk_file_perms delete_lnk_file_perms };

	filetrans_add_pattern($1_t,	springbatch_bin_t,	springbatch_auth_t,	dir, "keys" )
	filetrans_add_pattern($1_t,	springbatch_auth_t,	springbatch_auth_t,	{ dir file lnk_file } )
')